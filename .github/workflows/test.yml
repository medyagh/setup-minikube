name: "build-test"
on: # rebuild any PRs and main branch changes
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  schedule:
    # every 4 hours
    - cron: "0 */4 * * *"
  push:
    branches:
      - master
      - 'releases/*'
defaults:
  run:
    shell: bash # set bash as default shell
jobs:
  build: # make sure build/ci work properly
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20
      - run: |
          npm ci
          npm run all
          __tests__/verify-no-unstaged-changes.sh
  test: # make sure the action works on a clean machine without building
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: ./
        with:
          addons: ingress
      # Test that nginx ingress has been enabled
      - run: |
          minikube addons list | grep 'ingress ' | grep enabled
  test-extraOptions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: ./
        with:
          extra-config: 'kubelet.max-pods=10'
      # Test that minikube max-pods extraConfig has been set
      - run: |
          cat ~/.minikube/profiles/minikube/config.json | jq '.KubernetesConfig.ExtraOptions[0].Key' | grep max-pods
  test-nodes: # make sure that action supports 'nodes' input
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: ./
        with:
          nodes: 2
      # Test that there are 2 minikube nodes after startup
      - run: |
          if [ $(kubectl get nodes --no-headers | wc -l) -eq 2 ]; then
            echo "The cluster has exactly 2 nodes."
          else
            echo "::error::The cluster does not have 2 nodes."
            exit 1
          fi
  test-insecure-registry:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: ./
        with:
          insecure-registry: '192.168.0.0/16'
      # Test that minikube max-pods extraConfig has been set
      - run: |
          minikube ssh cat /lib/systemd/system/docker.service | grep 192.168.0.0/16
  test-featureGatesOptions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: ./
        with:
          feature-gates: 'ValidatingAdmissionPolicy=true'
          extra-config: 'apiserver.runtime-config=admissionregistration.k8s.io/v1alpha1'
          kubernetes-version: 1.26.0
          container-runtime: containerd
      # Should be fine
      - run: |
          cat ~/.minikube/profiles/minikube/config.json | grep ValidatingAdmissionPolicy
  test-none-driver-start-args-verbose:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: ./
        with:
          driver: none
          start-args: --alsologtostderr
      - run: |
          kubectl --namespace=kube-system rollout status deployment/coredns --timeout=60s --watch
      # Test basic networking and DNS resolution
      - run: |
          kubectl run \
            --attach \
            --image=docker.io/busybox \
            --restart=Never \
            --rm \
            nslookup \
            -- \
            nslookup kubernetes.default.svc.cluster.local
  test-vfkit-driver-start-args-verbose:
    runs-on: macos-15
    steps:
      - name: install vfkit and enable bootpd and vmnet-helper
        shell: bash
        run: |
          brew install vfkit
          fw=/usr/libexec/ApplicationFirewall/socketfilterfw
          sudo $fw --remove /usr/libexec/bootpd
          sudo $fw --add /usr/libexec/bootpd
          sudo $fw --unblock /usr/libexec/bootpd
          tag="$(curl -fsSL https://api.github.com/repos/nirs/vmnet-helper/releases/latest | jq -r .tag_name)"
          machine="$(uname -m)"
          archive="vmnet-helper-$tag-$machine.tar.gz"
          curl -LOf "https://github.com/nirs/vmnet-helper/releases/download/$tag/$archive"
          sudo tar xvf "$archive" -C / opt/vmnet-helper
          rm "$archive"
      - name: info block
        shell: bash
        run: |
          sysctl -n hw.memsize
          echo "$(sysctl -n hw.memsize) / 1024 / 1024 / 1024" | bc
          sysctl -n hw.ncpu
          sysctl -n machdep.cpu.brand_string
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: ./
        with:
          driver: vfkit
          start-args: --no-kubernetes --cpus=max --memory=max --alsologtostderr
          minikube-version: HEAD
      - run: |
          minikube profile list
          minikube ssh -- ls -lah
  test-podman-driver:
    runs-on: ubuntu-24.04
    steps:
      - name: Install Podman
        shell: bash
        run: |
          lsb_release -a
          sudo apt update
          sudo apt install -y podman
          echo "--------------------------"
          podman version || true
          echo "--------------------------"
          podman info || true
          echo "--------------------------"
          podman system df || true
          echo "--------------------------"
          podman system info --format='{{json .}}'|| true
          echo "--------------------------"
          podman ps || true
          echo "--------------------------"
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: ./
        with:
          driver: podman
      - run: |
          kubectl --namespace=kube-system rollout status deployment/coredns --timeout=60s --watch
      # Test basic networking and DNS resolution
      - run: |
          kubectl run \
            --attach \
            --image=docker.io/busybox \
            --restart=Never \
            --rm \
            nslookup \
            -- \
            nslookup kubernetes.default.svc.cluster.local
  # test-macos-docker-driver:
  #   runs-on: macos-12
  #   steps:
  #     - name: setup docker
  #       shell: bash
  #       run: |
  #         brew install kubernetes-cli
  #         brew install docker
  #         colima start
  #     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
  #     - uses: ./
  #       with:
  #         driver: docker
  #     - run: |
  #         kubectl --namespace=kube-system rollout status deployment/coredns --timeout=60s --watch
  #     # Test basic networking and DNS resolution
  #     - run: |
  #         kubectl run \
  #           --attach \
  #           --image=docker.io/busybox \
  #           --restart=Never \
  #           --rm \
  #           nslookup \
  #           -- \
  #           nslookup kubernetes.default.svc.cluster.local
